# -*- coding: utf-8 -*-
"""Activity_4_Creating_a_TensorFlow_Model_Using_Keras.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ABCSrG_hW8DbbDK_VwTYjPGYf7V9KD5V

# Activity 4: Creating a TensorFlow Model using Keras
In this notebook we design and compile a deep learning model using Keras as an interface to TensorFlow. We will continue to modify this model in our next lessons and activities by experimenting with different optimization techniques. However, the essential components of the model are entirely designed in this notebook.

## Building a Model
"""

# Commented out IPython magic to ensure Python compatibility.
# %autosave 5

from keras.models import Sequential
from keras.layers.recurrent import LSTM
from keras.layers.core import Dense, Activation

#  TASK:
#  Define `period_length`
#
period_length = 7

#  TASK:
#  Define `number_of_periods`
#
number_of_periods = 76

def build_model(period_length, number_of_periods, batch_size=1):
    """Build an LSTM model using Keras.

    Parameters
    ----------
    period_length: int
        The size of each observation used as input.

    number_of_periods: int
        The number of periods available in the
        dataset.

    batch_size: int
        The size of the batch used in each training
        period.

    Returns
    -------
    model: Keras model
        Compiled Keras model that can be trained
        and stored in disk.
    """
    model = Sequential()
    model.add(LSTM(
        units=period_length,
        batch_input_shape=(batch_size, number_of_periods, period_length),
        input_shape=(number_of_periods, period_length),
        return_sequences=False, stateful=False))

    model.add(Dense(units=period_length))
    model.add(Activation("linear"))

    model.compile(loss="mse", optimizer="rmsprop")

    return model

"""The steps above compile the LSTM model as TensorFlow computation graph. We can now train that model using our train and evaluate its results with our test set.

## Saving Model
"""

model = build_model(period_length=period_length, number_of_periods=number_of_periods)

model.save('bitcoin_lstm_v0.h5')